"""Abstract base class for lists."""

__author__ = 'Colin Ehr'

# Do not edit this file! Instead, have your classes implement this one;
# see the Hints section of the assignment.

import abc
from collections.abc import Iterator, Iterable

class AbstractList(abc.ABC):
    """Abstract base class for common list methods."""

    @abc.abstractmethod
    def append(self, item: object):
        """Add an item to the end of the list."""
        pass

    @abc.abstractmethod
    def clear(self):
        """Remove all items from the list."""
        pass

    @abc.abstractmethod
    def extend(self, other: Iterable):
        """Extend the list by appending all the items from the iterable."""
        # The only thing you are allowed to assume about the `other` variable is that
        # you can iterate through all of its items using a for loop.
        pass

    @abc.abstractmethod
    def index_of(self, item: object) -> int:
        """Returns the index of the element of the list that equals item.
        Raises a ValueError if there is no such item."""
        pass

    @abc.abstractmethod
    def insert(self, index: int, item: object):
        """Insert an item at a given position. The first argument is the index of the
        element before which to insert, so `a.insert(0, x)` inserts at the front of the
        list, and `a.insert(len(a), x)` is equivalent to `a.append(x)`."""
        pass

    @abc.abstractmethod
    def pop(self, index: int = None):
        """Remove the item at the given position in the list, and return it. If no
        index is specified, a.pop() removes and returns the last item in the list.
        It raises an IndexError if the list is empty or the index is outside the list
        range."""
        pass

    @abc.abstractmethod
    def __contains__(self) -> bool:
        """Return True if the list contains the item."""
        pass

    @abc.abstractmethod
    def __getitem__(self, index: int) -> object:
        """Return the item at position i in the list. It raises an IndexError if the
        index is less than 0 or greater than or equal to len(self)."""
        pass

    @abc.abstractmethod
    def __setitem__(self, item: object):
        """Replace the element at position i with item. It raises an IndexError if the
        index is less than 0 or greater than or equal to len(self)."""
        pass

    @abc.abstractmethod
    def __str__(self) -> str:
        """Return a string representing the content of the list."""
        pass

    @abc.abstractmethod
    def __eq__(self, other) -> bool:
        """Returns True if the lists are equal."""
        pass

    @abc.abstractmethod
    def __len__(self, index: int) -> int:
        """Returns the number of elements in the list."""
        pass

    @abc.abstractmethod
    def __iter__(self, index: int) -> Iterator:
        """Return an iterator for the content of the list."""
        pass
